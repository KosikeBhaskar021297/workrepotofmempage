import cv2
from flask import Flask,request ,render_template, Response
import os
from datetime import date
from datetime import datetime
from sklearn.neighbors import KNeighborsClassifier
import pandas as pd
import joblib
import numpy as np

#### Defining Flask App
app = Flask(__name__)

#### Saving Date today in 2 different formats
def datetoday():
    return date.today().strftime("%m_%d_%y")
def datetoday2():
    return date.today().strftime("%d-%B-%Y")

#### Initializing VideoCapture object to access WebCam
face_detector = cv2.CascadeClassifier(r'C:\Users\PANDU\Dropbox\My PC (LAPTOP-NJRNIHCN)\Desktop\signup\static\haarcascade_frontalface_default.xml')
#cap = cv2.VideoCapture(0)

#### If these directories don't exist, create them
if not os.path.isdir('Attendance'):
    
    os.makedirs('Attendance')
if not os.path.isdir('static/faces'):
    os.makedirs('static/faces')
if f'Attendance-{datetoday()}.csv' not in os.listdir('Attendance'):
    with open(f'Attendance/Attendance-{datetoday()}.csv','w') as f:
        f.write('Name,Date,Roll,Start Time,End Time')
        
#### get a number of total registered users
def totalreg():
    return len(os.listdir('static/faces'))
        
#### extract the face from an image
def extract_faces(img):
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    face_points = face_detector.detectMultiScale(gray, 1.3, 5)
    return face_points

#### Identify face using ML model
def identify_face(facearray): 
    model = joblib.load(r'C:\Users\PANDU\Dropbox\My PC (LAPTOP-NJRNIHCN)\Desktop\signup\static\face_recognition_model.pkl')
    return model.predict(facearray)

#### Extract info from today's attendance file in attendance folder
def extract_attendance():
    try:
        df = pd.read_csv(f'Attendance/Attendance-{datetoday()}.csv')
        names = df['Name']
        date=df['Date']
        rolls = df['Roll']
        times = df['Start Time']
        etime = df['End Time']
        l = len(df)
        return names,date,rolls,times,etime,l
    except pd.errors.EmptyDataError:
        print("Error: File contains no data or columns.")
        return None, None, None, None, 0

# Define a function to generate frames
def generate_frames():
    cap = cv2.VideoCapture(0, cv2.CAP_DSHOW)
    while True:
        success, frame = cap.read()
        if not success:
            break
        else:
            ret, buffer = cv2.imencode('.jpg', frame)
            frame = buffer.tobytes()
            yield (b'--frame\r\n'
                   b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')


#### A function which trains the model on all the faces available in faces folder
def train_model():
    faces = []
    labels = []
    userlist = os.listdir('static/faces')
    for user in userlist:
        for imgname in os.listdir(f'static/faces/{user}'):
            img = cv2.imread(f'static/faces/{user}/{imgname}')
            resized_face = cv2.resize(img, (50, 50))
            faces.append(resized_face.ravel())
            labels.append(user)
    faces = np.array(faces)
    knn = KNeighborsClassifier(n_neighbors=5)
    knn.fit(faces,labels)
    joblib.dump(knn,r"C:\Users\PANDU\Dropbox\My PC (LAPTOP-NJRNIHCN)\Desktop\signup\static\face_recognition_model.pkl")
    
#### Our main page


#### This function will run when we add a new user
userimagedir=[]
import random
takingpics=False
@app.route('/add',methods=['GET','POST'])
def add():
    global takingpics
    takingpics=True
    f=open(f'Attendance/Attendance-{datetoday()}.csv','a')
    f.close()
    userimagefolder='static/faces/'+str(random.randint(0,999))
    userimagedir.append(userimagefolder)
    if not os.path.isdir(userimagefolder):
        os.makedirs(userimagefolder)
    cap = cv2.VideoCapture(0)
    i,j = 0,0
    while 1:
        _,frame = cap.read()
        faces = extract_faces(frame)
        for (x,y,w,h) in faces:
            cv2.rectangle(frame,(x, y), (x+w, y+h), (255, 0, 20), 2)
            cv2.putText(frame,f'Images Captured: {i}/50',(30,30),cv2.FONT_HERSHEY_SIMPLEX,1,(255, 0, 20),2,cv2.LINE_AA)
            if j%10==0:
                name = str(i)+'.jpg'
                cv2.imwrite(userimagefolder+'/'+name,frame[y:y+h,x:x+w])
                i+=1
            j+=1         
        if j==500:
            takingpics=False
            break
        cv2.imshow('Adding new User',frame)
        if cv2.waitKey(1)==27:
            break
    cap.release()
    cv2.destroyAllWindows()
    #add csv file
    names,date,rolls,times,etime,l = extract_attendance()
    return {"sucess":True}


@app.route('/chiru')
def video_feed():
    print(takingpics)
    return Response(generate_frames(), mimetype='multipart/x-mixed-replace; boundary=frame')

#@app.route('/video_feed')
#def video_feed():
#    return Response(generate_frames(), mimetype='multipart/x-mixed-replace; boundary=frame')

# Define a route to serve the video stream


@app.route('/add_data',methods=['GET','POST'])
def add_data():

    newusername = request.form['newusername']
    newuserid = request.form['newuserid']
    from datetime import date
    current_date=date.today()
    current_time = datetime.now().strftime("%H:%M:%S")
    
    new_name = newusername+'_'+str(newuserid)
    os.rename( userimagedir[-1],"/".join(userimagedir[-1].split('/')[:-1])+'/'+ new_name)
    
    if (newusername,newuserid) not in list(['Name','Roll']):
        with open(f'Attendance/Attendance-{datetoday()}.csv','a') as f:
            #f.write(f'\n{newusername},{newuserid}')
            f.write(f'\n{newusername},{current_date},{newuserid},{current_time}')
    print('Training Model')
    train_model()
    #newusername,newuserid=add_attendance(name) 
    names,date,rolls,times,etime,l = extract_attendance()
    #return render_template('home.html',names=names,date=date,rolls=rolls,times=times,etime=etime,l=l,totalreg=totalreg(),datetoday2=datetoday2()) 
    return {"sucess":True}

#### Our main function which runs the Flask App
if __name__ == '__main__':
    app.run(debug=True)


